From 66b7cc2769cc9d48df5e38089d0d2f0bcae29a7f Mon Sep 17 00:00:00 2001
From: Natalia Kovalenko <natasha.k@variscite.com>
Date: Mon, 1 Apr 2024 10:43:25 +0200
Subject: [PATCH] bluetooth: Allow LE vendor capability response of 8 bytes.

The Bluetooth LE vendor capability response can have one less parameter,
instead of having filtering_support and max_filters, just max_filters.
The response length of 8 bytes is a valid length
The filtering_support value will be retrieved using the value of max_filters.

Change-Id: I4b4b8c67b83274096b0bd635d58ba7f430a2b1cb
Signed-off-by: Natalia Kovalenko <natasha.k@variscite.com>
Co-authored-by: Pierluigi Passaro <pierluigi.p@variscite.com>
Co-authored-by: FrancescoFerraro <francesco.f@variscite.com>
---
 system/gd/hci/controller.cc     | 19 +++++++++++++++++++
 system/gd/hci/hci_packets.pdl   | 15 +++++++++++++++
 system/stack/btm/btm_ble_gap.cc | 17 ++++++++++++-----
 3 files changed, 46 insertions(+), 5 deletions(-)

diff --git a/system/gd/hci/controller.cc b/system/gd/hci/controller.cc
index a3b7268215..ac05ebd4e1 100644
--- a/system/gd/hci/controller.cc
+++ b/system/gd/hci/controller.cc
@@ -590,6 +590,25 @@ struct Controller::impl {
       }
       vendor_capabilities_.a2dp_source_offload_capability_mask_ = v98.GetA2dpSourceOffloadCapabilityMask();
       vendor_capabilities_.bluetooth_quality_report_support_ = v98.GetBluetoothQualityReportSupport();
+    } else {
+      auto complete_view = LeGetVendorCapabilitiesCompleteRspLength8View::Create(view);
+      if (complete_view.IsValid()) {
+        vendor_capabilities_.is_supported_ = 0x01;
+
+        BaseVendorCapabilitiesRspLength8 base_vendor_capabilities = complete_view.GetBaseVendorCapabilities();
+        vendor_capabilities_.max_advt_instances_ = base_vendor_capabilities.max_advt_instances_;
+        vendor_capabilities_.offloaded_resolution_of_private_address_ = base_vendor_capabilities.offloaded_resolution_of_private_address_;
+        vendor_capabilities_.total_scan_results_storage_ = base_vendor_capabilities.total_scan_results_storage_;
+        vendor_capabilities_.max_irk_list_sz_ = base_vendor_capabilities.max_irk_list_sz_;
+        vendor_capabilities_.max_filter_ = base_vendor_capabilities.max_filter_;
+        vendor_capabilities_.activity_energy_info_support_ = base_vendor_capabilities.activity_energy_info_support_;
+        if (vendor_capabilities_.max_filter_ > 0)
+          vendor_capabilities_.filtering_support_ = 1;
+        else
+          vendor_capabilities_.filtering_support_ = 0;
+
+        vendor_capabilities_.version_supported_ = 55;
+      }
     }
   }
 
diff --git a/system/gd/hci/hci_packets.pdl b/system/gd/hci/hci_packets.pdl
index 11d5b86f65..22d9aa415a 100644
--- a/system/gd/hci/hci_packets.pdl
+++ b/system/gd/hci/hci_packets.pdl
@@ -4828,6 +4828,15 @@ test LeGetVendorCapabilities {
   "\x53\xfd\x00",
 }
 
+struct BaseVendorCapabilitiesRspLength8 {
+  max_advt_instances: 8,
+  offloaded_resolution_of_private_address : 8,
+  total_scan_results_storage: 16,
+  max_irk_list_sz: 8,
+  max_filter: 8,
+  activity_energy_info_support: 8,
+}
+
 struct BaseVendorCapabilities {
   max_advt_instances: 8,
   offloaded_resolution_of_private_address : 8,
@@ -4838,6 +4847,12 @@ struct BaseVendorCapabilities {
   activity_energy_info_support: 8,
 }
 
+packet LeGetVendorCapabilitiesCompleteRspLength8 : CommandComplete (command_op_code = LE_GET_VENDOR_CAPABILITIES) {
+  status : ErrorCode,
+  base_vendor_capabilities : BaseVendorCapabilitiesRspLength8,
+  _payload_,
+}
+
 packet LeGetVendorCapabilitiesComplete : CommandComplete (command_op_code = LE_GET_VENDOR_CAPABILITIES) {
   status : ErrorCode,
   base_vendor_capabilities : BaseVendorCapabilities,
diff --git a/system/stack/btm/btm_ble_gap.cc b/system/stack/btm/btm_ble_gap.cc
index f87c37491f..ac967574c9 100644
--- a/system/stack/btm/btm_ble_gap.cc
+++ b/system/stack/btm/btm_ble_gap.cc
@@ -74,9 +74,8 @@ extern const tBLE_BD_ADDR convert_to_address_with_type(
 
 #define BTM_EXT_BLE_RMT_NAME_TIMEOUT_MS (30 * 1000)
 #define MIN_ADV_LENGTH 2
-#define BTM_VSC_CHIP_CAPABILITY_RSP_LEN 9
-#define BTM_VSC_CHIP_CAPABILITY_RSP_LEN_L_RELEASE \
-  BTM_VSC_CHIP_CAPABILITY_RSP_LEN
+#define BTM_VSC_CHIP_CAPABILITY_RSP_LEN 8
+#define BTM_VSC_CHIP_CAPABILITY_RSP_LEN_L_RELEASE 9
 #define BTM_VSC_CHIP_CAPABILITY_RSP_LEN_M_RELEASE 15
 #define BTM_VSC_CHIP_CAPABILITY_RSP_LEN_S_RELEASE 25
 
@@ -693,8 +692,16 @@ static void btm_ble_vendor_capability_vsc_cmpl_cback(
   STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.rpa_offloading, p);
   STREAM_TO_UINT16(btm_cb.cmn_ble_vsc_cb.tot_scan_results_strg, p);
   STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.max_irk_list_sz, p);
-  STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.filter_support, p);
-  STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.max_filter, p);
+  if (p_vcs_cplt_params->param_len > BTM_VSC_CHIP_CAPABILITY_RSP_LEN ) {
+    STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.filter_support, p);
+    STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.max_filter, p);
+  } else {
+    STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.max_filter, p);
+    if (btm_cb.cmn_ble_vsc_cb.max_filter > 0)
+      btm_cb.cmn_ble_vsc_cb.filter_support = 1;
+    else
+      btm_cb.cmn_ble_vsc_cb.filter_support = 0;
+  }
   STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.energy_support, p);
 
   if (p_vcs_cplt_params->param_len >
-- 
2.34.1
