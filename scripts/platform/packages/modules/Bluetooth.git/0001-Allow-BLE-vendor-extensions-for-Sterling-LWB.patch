From 9c74d1218e24e5b0764ed7e9aaf1239ac05f0ce1 Mon Sep 17 00:00:00 2001
From: FrancescoFerraro <francesco.f@variscite.com>
Date: Tue, 27 Feb 2024 12:11:09 +0100
Subject: [PATCH 1/2] Allow BLE vendor extensions for Sterling LWB

When querying for HCI_BLE_VENDOR_CAP, Sterling LWB reply without the last
byte, providing the "energy support" capability.
This patch reduce the expected stream length from 9 to 8 and set the
"energy support" to 0 if missing in the stream.

Change-Id: Ie7bfff28c7e8ca4447280227a086983542f4fe48
Signed-off-by: Pierluigi Passaro <pierluigi.p@variscite.com>
Signed-off-by: FrancescoFerraro <francesco.f@variscite.com>
---
 system/gd/hci/controller.cc     | 17 ++++++++++++++---
 system/gd/hci/hci_packets.pdl   |  8 ++++++--
 system/stack/btm/btm_ble_gap.cc | 11 +++++++----
 3 files changed, 27 insertions(+), 9 deletions(-)

diff --git a/system/gd/hci/controller.cc b/system/gd/hci/controller.cc
index c08ecab9d5..6ff46b381d 100644
--- a/system/gd/hci/controller.cc
+++ b/system/gd/hci/controller.cc
@@ -539,7 +539,7 @@ struct Controller::impl {
     if (complete_view.IsValid()) {
       vendor_capabilities_.is_supported_ = 0x01;
 
-      // v0.55
+      // v0.55 without activity_energy_info_support
       BaseVendorCapabilities base_vendor_capabilities = complete_view.GetBaseVendorCapabilities();
       vendor_capabilities_.max_advt_instances_ = base_vendor_capabilities.max_advt_instances_;
       vendor_capabilities_.offloaded_resolution_of_private_address_ =
@@ -548,14 +548,25 @@ struct Controller::impl {
       vendor_capabilities_.max_irk_list_sz_ = base_vendor_capabilities.max_irk_list_sz_;
       vendor_capabilities_.filtering_support_ = base_vendor_capabilities.filtering_support_;
       vendor_capabilities_.max_filter_ = base_vendor_capabilities.max_filter_;
-      vendor_capabilities_.activity_energy_info_support_ = base_vendor_capabilities.activity_energy_info_support_;
+      if (complete_view.GetPayload().size() == 0) {
+        vendor_capabilities_.version_supported_ = 55;
+        return;
+      }
+
+      // v0.55
+      auto v55 = LeGetVendorCapabilitiesComplete055View::Create(complete_view);
+      if (!v55.IsValid()) {
+        LOG_ERROR("invalid data for hci requirements v0.55");
+        return;
+      }
+      vendor_capabilities_.activity_energy_info_support_ = v55.GetActivityEnergyInfoSupport();
       if (complete_view.GetPayload().size() == 0) {
         vendor_capabilities_.version_supported_ = 55;
         return;
       }
 
       // v0.95
-      auto v95 = LeGetVendorCapabilitiesComplete095View::Create(complete_view);
+      auto v95 = LeGetVendorCapabilitiesComplete095View::Create(v55);
       if (!v95.IsValid()) {
         LOG_ERROR("invalid data for hci requirements v0.95");
         return;
diff --git a/system/gd/hci/hci_packets.pdl b/system/gd/hci/hci_packets.pdl
index 11d5b86f65..7a4688d827 100644
--- a/system/gd/hci/hci_packets.pdl
+++ b/system/gd/hci/hci_packets.pdl
@@ -4835,7 +4835,6 @@ struct BaseVendorCapabilities {
   max_irk_list_sz: 8,
   filtering_support: 8,
   max_filter: 8,
-  activity_energy_info_support: 8,
 }
 
 packet LeGetVendorCapabilitiesComplete : CommandComplete (command_op_code = LE_GET_VENDOR_CAPABILITIES) {
@@ -4844,7 +4843,12 @@ packet LeGetVendorCapabilitiesComplete : CommandComplete (command_op_code = LE_G
   _payload_,
 }
 
-packet LeGetVendorCapabilitiesComplete095 : LeGetVendorCapabilitiesComplete {
+packet LeGetVendorCapabilitiesComplete055 : LeGetVendorCapabilitiesComplete {
+  activity_energy_info_support: 8,
+  _payload_,
+}
+
+packet LeGetVendorCapabilitiesComplete095 : LeGetVendorCapabilitiesComplete055 {
   version_supported: 16,
   total_num_of_advt_tracked: 16,
   extended_scan_support: 8,
diff --git a/system/stack/btm/btm_ble_gap.cc b/system/stack/btm/btm_ble_gap.cc
index f87c37491f..82400fae2b 100644
--- a/system/stack/btm/btm_ble_gap.cc
+++ b/system/stack/btm/btm_ble_gap.cc
@@ -74,9 +74,8 @@ extern const tBLE_BD_ADDR convert_to_address_with_type(
 
 #define BTM_EXT_BLE_RMT_NAME_TIMEOUT_MS (30 * 1000)
 #define MIN_ADV_LENGTH 2
-#define BTM_VSC_CHIP_CAPABILITY_RSP_LEN 9
-#define BTM_VSC_CHIP_CAPABILITY_RSP_LEN_L_RELEASE \
-  BTM_VSC_CHIP_CAPABILITY_RSP_LEN
+#define BTM_VSC_CHIP_CAPABILITY_RSP_LEN 8
+#define BTM_VSC_CHIP_CAPABILITY_RSP_LEN_L_RELEASE 9
 #define BTM_VSC_CHIP_CAPABILITY_RSP_LEN_M_RELEASE 15
 #define BTM_VSC_CHIP_CAPABILITY_RSP_LEN_S_RELEASE 25
 
@@ -695,7 +694,11 @@ static void btm_ble_vendor_capability_vsc_cmpl_cback(
   STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.max_irk_list_sz, p);
   STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.filter_support, p);
   STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.max_filter, p);
-  STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.energy_support, p);
+  if (p_vcs_cplt_params->param_len > BTM_VSC_CHIP_CAPABILITY_RSP_LEN) {
+    STREAM_TO_UINT8(btm_cb.cmn_ble_vsc_cb.energy_support, p);
+  } else {
+    btm_cb.cmn_ble_vsc_cb.energy_support = 0;
+  }
 
   if (p_vcs_cplt_params->param_len >
       BTM_VSC_CHIP_CAPABILITY_RSP_LEN_L_RELEASE) {
-- 
2.43.0

